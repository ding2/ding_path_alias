<?php
/**
 * @file
 * Create tokens and integrate with pathauto alias generation.
 */

include_once 'ding_path_alias.features.inc';

/**
 * Implements hook_enable().
 */
function ding_path_alias_enable() {
  // New module weights in core: invoke this module later than most others.
  db_update('system')
    ->fields(array(
      'weight' => 1,
    ))
    ->condition('type', 'module')
    ->condition('name', 'ding_path_alias')
    ->execute();
}

/**
 * Implements hook_token_info().
 */
function ding_path_alias_token_info() {
  $info['types']['og-field'] = array(
    'name' => t('Organic group field'),
    'description' => t('Organic group field holding relation to a group.'),
  );

  $info['tokens']['og-field']['gid'] = array(
    'name' => t('Organic groups group ID'),
    'description' => t('The unique ID of the organic groups group.'),
    'type' => 'integer',
  );

  $info['tokens']['og-field']['node'] = array(
    'name' => t('Organic groups node'),
    'description' => t('The node of the organic group if any.'),
    'type' => 'node',
  );

  return $info;
}

/**
 * Implements hook_path_alias_types().
 *
 * Used primarily by the bulk delete form.
 */
function ding_path_alias_path_alias_types() {
  $objects = array();
  if (module_exists('ding_library') && module_exists('ding_news')) {
    $objects['library/%/news'] = t('Library news pages');
  }
  if (module_exists('ding_library') && module_exists('ding_event')) {
    $objects['library/%/events'] = t('Library event pages');
  }
  if (module_exists('ding_library')) {
    $objects['node/%/about'] = t('About library page');
  }
  return $objects;
}

/**
 * Implements hook_pathauto().
 */
function ding_path_alias_pathauto($op) {
  switch ($op) {
    case 'settings':
      /**
       * Pathauto module isn't create with the kind of functionality we have in
       * mind: Create a bunch of different path aliases with different url
       * patterns. We need to create a setting for each pattern type we want to
       * use as the batch callback needs to know what the internal url will be.
       * Since pathauto will key the form items on the module value, we need to
       * create a unique module defition per url pattern.
       */
      $settings = array();
      $languages = array();
      if (module_exists('locale')) {
        $languages = array(LANGUAGE_NONE => t('language neutral')) + locale_language_list('name');
      }
      if (module_exists('ding_library') && module_exists('ding_news')) {
        $build = array(
          'module' => 'ding_path_alias_library_news_page',
          'token_type' => 'node',
          'groupheader' => t('Library news page'),
          'patterndescr' => t('Default path alias pattern'),
          'patterndefault' => 'library/[node:field_slug]/news',
          'batch_update_callback' => 'ding_path_alias_library_news_page_pathauto_bulk_update_batch_process',
          'batch_file' => drupal_get_path('module', 'ding_path_alias') . '/ding_path_alias.pathauto.inc',
        );
        if (count($languages) && variable_get('language_content_type_ding_library', 0)) {
          foreach ($languages as $lang_code => $lang_name) {
            $build['patternitems']['ding_library_' . $lang_code] = t('News pages for library nodes in @language', array('@language' => $lang_name));
          }
        }
        $settings['library_news_page'] = (object) $build;
      }
      if (module_exists('ding_library') && module_exists('ding_event')) {
        $build = array(
          'module' => 'ding_path_alias_library_event_page',
          'token_type' => 'node',
          'groupheader' => t('Library event page'),
          'patterndescr' => t('Default path alias pattern'),
          'patterndefault' => 'library/[node:field_slug]/events',
          'batch_update_callback' => 'ding_path_alias_library_event_page_pathauto_bulk_update_batch_process',
          'batch_file' => drupal_get_path('module', 'ding_path_alias') . '/ding_path_alias.pathauto.inc',
        );
        if (count($languages) && variable_get('language_content_type_ding_library', 0)) {
          foreach ($languages as $lang_code => $lang_name) {
            $build['patternitems']['ding_library_' . $lang_code] = t('Event pages for library nodes in @language', array('@language' => $lang_name));
          }
        }
        $settings['library_event_page'] = (object) $build;
      }
      if (module_exists('ding_library')) {
        $build = array(
          'module' => 'ding_path_alias_library_about_page',
          'token_type' => 'node',
          'groupheader' => t('About library page'),
          'patterndescr' => t('Default path alias pattern'),
          'patterndefault' => 'library/[node:field_slug]/about',
          'batch_update_callback' => 'ding_path_alias_library_about_page_pathauto_bulk_update_batch_process',
          'batch_file' => drupal_get_path('module', 'ding_path_alias') . '/ding_path_alias.pathauto.inc',
        );
        if (count($languages) && variable_get('language_content_type_ding_library', 0)) {
          foreach ($languages as $lang_code => $lang_name) {
            $build['patternitems']['ding_library_' . $lang_code] = t('Sbout pages for library nodes in @language', array('@language' => $lang_name));
          }
        }
        $settings['library_about_page'] = (object) $build;
      }
      return $settings;
      break;
  }
}

/**
 * Implements hook_node_insert().
 */
function ding_path_alias_node_insert($node) {
  // Each time a commerce product is created, we create a path alias for it.
  if ($node->type == 'ding_library') {
    module_load_include('inc', 'ding_path_alias', 'ding_path_alias.pathauto');
    ding_path_alias_library_news_page_pathauto_update_alias($node, 'insert');
    ding_path_alias_library_event_page_pathauto_update_alias($node, 'insert');
    ding_path_alias_library_about_page_pathauto_update_alias($node, 'insert');
  }
}

/**
 * Implements hook_node_update().
 */
function ding_path_alias_node_update($node) {
  // Need to clean up products in the sitemap, when they are deleted
  if ($node->type == 'ding_library') {
    module_load_include('inc', 'ding_path_alias', 'ding_path_alias.pathauto');
    ding_path_alias_library_news_page_pathauto_update_alias($node, 'update');
    ding_path_alias_library_event_page_pathauto_update_alias($node, 'update');
    ding_path_alias_library_about_page_pathauto_update_alias($node, 'update');
  }
}
